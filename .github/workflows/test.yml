name: Test
on:
  push:
    branches:
      - main
      - feature/**
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  test:
    name: Tests
    strategy:
      matrix:
        runs-on: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Format
        run: npm run format-check

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ matrix.runs-on }}" = "windows-latest" ]; then
            npm run test
          else
            NODE_OPTIONS=--experimental-vm-modules npm run test
          fi

      # Start LocalStack and wait for it to be ready
      - name: Start LocalStack
        run: docker run -d -p 4566:4566 localstack/localstack

      - name: Wait for LocalStack to be Ready
        run: |
          for i in {1..10}; do
            if aws --endpoint-url=http://localhost:4566 s3 ls > /dev/null 2>&1; then
              echo "LocalStack is ready"
              exit 0
            fi
            echo "Waiting for LocalStack..."
            sleep 3
          done
          echo "LocalStack did not start in time" && exit 1

      - name: Set up mock AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=fake_access_key" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=fake_secret_key" >> $GITHUB_ENV
          echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV

      - name: Create Mock S3 Bucket
        run: aws --endpoint-url=http://localhost:4566 s3 mb s3://dummy-bucket || true

      # Debugging LocalStack
      - name: List Buckets to Confirm S3 is Working
        run: aws --endpoint-url=http://localhost:4566 s3 ls

      # Test special character handling
      - name: Create files with special characters
        run: |
          mkdir -p "path/to/special_chars"
          echo "File with spaces" > "path/to/special_chars/file with spaces.txt"
          echo "File with symbols" > "path/to/special_chars/file-with-symbols.txt"

      - name: Upload special character files to mock S3
        uses: ./
        with:
          path: "path/to/special_chars/**"
          direction: 'upload'
          name: 'special-chars-test'
          artifact-bucket: 'dummy-bucket'

      # Test large number of files
      - name: Create many small files
        run: |
          mkdir -p path/to/many-files
          for i in {1..100}; do
            echo "Content for file $i" > "path/to/many-files/file$i.txt"
          done
        shell: bash

      - name: Upload many files as artifact
        uses: ./
        with:
          path: path/to/many-files/*
          direction: 'upload'
          name: 'many-files-test'
          artifact-bucket: 'dummy-bucket'

      # Test different file types
      - name: Create different file types
        run: |
          mkdir -p path/to/file-types
          echo '{"key": "value"}' > path/to/file-types/test.json
          echo '<?xml version="1.0"?><root>test</root>' > path/to/file-types/test.xml
          echo 'binary content' > path/to/file-types/test.bin
          echo '#!/bin/bash\necho "test"' > path/to/file-types/test.sh
          chmod +x path/to/file-types/test.sh
        shell: bash

      - name: Upload different file types as artifact
        uses: ./
        with:
          path: path/to/file-types/*
          direction: 'upload'
          name: 'file-types-test'
          artifact-bucket: 'dummy-bucket'

      # Test regular artifact upload/download functionality
      - name: Create test files
        run: |
          mkdir -p path/to/dir-1
          mkdir -p path/to/dir-2
          mkdir -p path/to/dir-3
          echo "Lorem ipsum dolor sit amet" > path/to/dir-1/file1.txt
          echo "Hello world from file #2" > path/to/dir-2/file2.txt
          echo "This is going to be a test for a large enough file that should get compressed with GZip" > path/to/dir-3/gzip.txt

      - name: Upload single file as artifact
        uses: ./
        with:
          path: path/to/dir-1/file1.txt
          direction: 'upload'
          name: 'artifact-a'
          artifact-bucket: 'dummy-bucket'

      - name: Upload wildcard pattern as artifact
        uses: ./
        with:
          path: path/**/dir*/
          direction: 'upload'
          name: 'wildcard-artifact'
          artifact-bucket: 'dummy-bucket'

      - name: Upload GZip artifact
        uses: ./
        with:
          path: path/to/dir-3/
          direction: 'upload'
          name: 'gzip-artifact'
          artifact-bucket: 'dummy-bucket'

      - name: Upload multi-path artifact
        uses: ./
        with:
          path: |
            path/to/dir-1/*
            path/to/dir-[23]/*
            !path/to/dir-3/*.txt
          direction: 'upload'
          name: 'multi-path-artifact'
          artifact-bucket: 'dummy-bucket'

      # Download artifacts and verify
      - name: Download and verify single file artifact
        uses: ./
        with:
          path: some/new/path
          direction: 'download'
          name: 'artifact-a'
          artifact-bucket: 'dummy-bucket'

      - name: Verify single file artifact
        run: |
          file="some/new/path/file1.txt"
          if [ ! -f "$file" ]; then
              echo "Expected file does not exist"
              exit 1
          fi
          if [ "$(cat "$file")" != "Lorem ipsum dolor sit amet" ]; then
              echo "File contents of downloaded artifact are incorrect"
              exit 1
          fi
        shell: bash

      # Verify empty directory test
      - name: Download empty directory artifact
        uses: ./
        with:
          path: empty-dir-test
          direction: 'download'
          name: 'empty-dir-test'
          artifact-bucket: 'dummy-bucket'

      # Verify special characters test
      - name: Download special characters artifact
        uses: ./
        with:
          path: special-chars-test
          direction: 'download'
          name: 'special-chars-test'
          artifact-bucket: 'dummy-bucket'

      - name: Verify special characters files
        run: |
          if [ ! -f "special-chars-test/file with spaces.txt" ]; then
              echo "File with spaces not found"
              exit 1
          fi
          if [ ! -f "special-chars-test/file-with-@#\$symbols.txt" ]; then
              echo "File with symbols not found"
              exit 1
          fi
        shell: bash

      # Verify many files test
      - name: Download many files artifact
        uses: ./
        with:
          path: many-files-test
          direction: 'download'
          name: 'many-files-test'
          artifact-bucket: 'dummy-bucket'

      - name: Verify many files
        run: |
          fileCount=$(find many-files-test -type f | wc -l)
          if [ "$fileCount" -ne 100 ]; then
              echo "Expected 100 files, found $fileCount"
              exit 1
          fi
        shell: bash

      # Verify different file types test
      - name: Download file types artifact
        uses: ./
        with:
          path: file-types-test
          direction: 'download'
          name: 'file-types-test'
          artifact-bucket: 'dummy-bucket'

      - name: Verify file types
        run: |
          files=("test.json" "test.xml" "test.bin" "test.sh")
          for file in "${files[@]}"; do
              if [ ! -f "file-types-test/$file" ]; then
                  echo "File $file not found"
                  exit 1
              fi
          done
          
          # Verify JSON content
          if [ "$(jq -r '.key' file-types-test/test.json)" != "value" ]; then
              echo "JSON content is incorrect"
              exit 1
          fi
          
          # Verify XML content
          if ! grep -q "<root>test</root>" file-types-test/test.xml; then
              echo "XML content is incorrect"
              exit 1
          fi
        shell: bash

      - name: Download and verify wildcard pattern artifact
        uses: ./
        with:
          path: some/other/path
          direction: 'download'
          name: 'wildcard-artifact'
          artifact-bucket: 'dummy-bucket'

      - name: Verify wildcard pattern artifact
        run: |
          file1="some/other/path/to/dir-1/file1.txt"
          file2="some/other/path/to/dir-2/file2.txt"
          if [ ! -f "$file1" ] || [ ! -f "$file2" ]; then
              echo "Expected files do not exist"
              exit 1
          fi
          if [ "$(cat "$file1")" != "Lorem ipsum dolor sit amet" ] || [ "$(cat "$file2")" != "Hello world from file #2" ]; then
              echo "File contents of downloaded artifacts are incorrect"
              exit 1
          fi
        shell: bash

      - name: Download and verify GZip artifact
        uses: ./
        with:
          path: gzip/artifact/path
          direction: 'download'
          name: 'gzip-artifact'
          artifact-bucket: 'dummy-bucket'

      - name: Verify GZip artifact
        run: |
          gzipFile="gzip/artifact/path/gzip.txt"
          if [ ! -f "$gzipFile" ]; then
              echo "Expected file does not exist"
              exit 1
          fi
          if ! grep -q "compressed with GZip" "$gzipFile"; then
              echo "File contents of downloaded artifact is incorrect"
              exit 1
          fi
        shell: bash

      - name: Download and verify multi-path artifact
        uses: ./
        with:
          path: multi/artifact
          direction: 'download'
          name: 'multi-path-artifact'
          artifact-bucket: 'dummy-bucket'

      - name: Verify multi-path artifact
        run: |
          file1="multi/artifact/dir-1/file1.txt"
          file2="multi/artifact/dir-2/file2.txt"
          if [ ! -f "$file1" ] || [ ! -f "$file2" ]; then
              echo "Expected files do not exist"
              exit 1
          fi
          if [ "$(cat "$file1")" != "Lorem ipsum dolor sit amet" ] || [ "$(cat "$file2")" != "Hello world from file #2" ]; then
              echo "File contents of downloaded artifacts are incorrect"
              exit 1
          fi
        shell: bash